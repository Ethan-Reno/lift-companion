// Prisma schema file: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    settings      Settings[]
    exercises     Exercise[]
    categoricalMetrics       CategoricalMetric[]
    continuousMetrics        ContinuousMetric[]
}

model Settings {
    id               String     @id @default(cuid())
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    unit             String     @default("metric")
    dashboardDisplay String     @default("recent")
    formula1RM       String     @default("brzycki")
    user             User       @relation(fields: [userId], references: [id])
    userId           String
}

enum Measurement {
    weight
    distance
    time
}

enum ExerciseStatus {
    active
    archived
}

model Exercise {
    id           String          @id @default(cuid())
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    status       ExerciseStatus  @default(active)
    name         String          @db.VarChar(100)
    description  String          @db.VarChar(100)
    measurement  Measurement     @default(weight)
    user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    workouts     Workout[]
}

model Set {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    reps        Int
    value       Int
    rpe         Int
    workout     Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId   String
}

enum CategoricalScale {
    nominal
    ordinal
}

enum ContinuousScale {
    interval
    ratio
}

model CategoricalMetric {
    id              String                    @id @default(cuid())
    createdAt       DateTime                  @default(now())
    updatedAt       DateTime                  @updatedAt
    name            String                    @db.VarChar(100)
    description     String                    @db.VarChar(100)
    scale           CategoricalScale          @default(ordinal)
    user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    options         CategoricalMetricOption[]
    WorkoutMetrics  WorkoutMetric[]
}

model CategoricalMetricOption {
    id                    String             @id @default(cuid())
    createdAt             DateTime           @default(now())
    updatedAt             DateTime           @updatedAt
    label                 String             @db.VarChar(100)
    value                 Int
    categoricalMetric     CategoricalMetric  @relation(fields: [categoricalMetricId], references: [id], onDelete: Cascade)
    categoricalMetricId   String
}

model ContinuousMetric {
    id              String           @id @default(cuid())
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    name            String           @db.VarChar(100)
    description     String           @db.VarChar(100)
    scale           ContinuousScale  @default(ratio)
    min             Int              @default(0)
    max             Int
    step            Int              @default(1)
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    WorkoutMetrics  WorkoutMetric[]
}

model Workout {
    id              String           @id @default(cuid())
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    sets            Set[]
    workoutMetrics  WorkoutMetric[]
    exercise        Exercise         @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    exerciseId      String
}

model WorkoutMetric {
    id                   String              @id @default(cuid())
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    value                Int
    categoricalMetric    CategoricalMetric?  @relation(fields: [categoricalMetricId], references: [id], onDelete: Cascade)
    categoricalMetricId  String?
    continuousMetric     ContinuousMetric?   @relation(fields: [continuousMetricId], references: [id], onDelete: Cascade)
    continuousMetricId   String?
    workout              Workout             @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId            String
}
