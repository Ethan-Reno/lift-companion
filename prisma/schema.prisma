generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  exercises     Exercise[]
  metrics       Metric[]
  sessions      Session[]
  settings      Settings[]
}

model Settings {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  unit             String   @default("metric")
  dashboardDisplay String   @default("recent")
  formula1RM       String   @default("brzycki")
  userId           String
  user             User     @relation(fields: [userId], references: [id])
}

model Exercise {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      ExerciseStatus @default(active)
  name        String         @db.VarChar(100)
  description String         @db.VarChar(100)
  measurement Measurement    @default(weight)
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts    Workout[]
}

model Set {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reps       Int
  value      Int
  rpe        Int
  epley1rm   Int
  bryzcki1rm Int
  wathan1rm  Int
  workoutId  String
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model Metric {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @db.VarChar(100)
  description    String          @db.VarChar(100)
  scale          Scale           @default(ratio)
  min            Int?
  max            Int?
  step           Int?            @default(1)
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  options        MetricOption[]
  workoutMetrics WorkoutMetric[]
}

model MetricOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String   @db.VarChar(100)
  value     Int
  metricId  String
  metric    Metric   @relation(fields: [metricId], references: [id], onDelete: Cascade)
}

model Workout {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  exerciseId     String
  sets           Set[]
  exercise       Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutMetrics WorkoutMetric[]
}

model WorkoutMetric {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Int
  metricId  String
  workoutId String
  metric    Metric   @relation(fields: [metricId], references: [id], onDelete: Cascade)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

enum Measurement {
  weight
  distance
  time
}

enum ExerciseStatus {
  active
  archived
}

enum Scale {
  nominal
  ordinal
  interval
  ratio
}
