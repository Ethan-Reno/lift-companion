// Prisma schema file: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    settings      Settings[]
    exercises     Exercise[]
}

model Settings {
    id               String      @id @default(cuid())
    unit             String      @default("metric")
    dashboardDisplay String      @default("recent")
    formula1RM       String      @default("brzycki")
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
    user             User        @relation(fields: [userId], references: [id])
    userId           String
}

enum Measurement {
    weight
    distance
    time
}

enum ExerciseStatus {
    active
    inactive
    deleted
}

model Exercise {
    id           String         @id @default(cuid())
    status       ExerciseStatus @default(inactive)
    name         String         @db.VarChar(100)
    description  String         @db.VarChar(100)
    measurement  Measurement    @default(weight)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    workouts     Workout[]
}

enum WorkoutStatus {
    started
    completed
}

model Set {
    id          String    @id @default(cuid())
    reps        Int
    value       Int
    rpe         Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workout     Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId   String
}

enum InsightValue {
    belowAverage
    average
    aboveAverage
}

model Insight {
    id            String         @id @default(cuid())
    mood          InsightValue?
    sleepQuality  InsightValue?
    warmupQuality InsightValue?
    energyLevel   InsightValue?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    workout       Workout        @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId     String
}

model Workout {
    id           String        @id @default(cuid())
    status       WorkoutStatus @default(started)
    sets         Set[]
    insights     Insight[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    exercise     Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    exerciseId   String
}
